/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DiscordMemberService } from "../discordMember.service";
import { DiscordMemberCreateInput } from "./DiscordMemberCreateInput";
import { DiscordMember } from "./DiscordMember";
import { DiscordMemberFindManyArgs } from "./DiscordMemberFindManyArgs";
import { DiscordMemberWhereUniqueInput } from "./DiscordMemberWhereUniqueInput";
import { DiscordMemberUpdateInput } from "./DiscordMemberUpdateInput";

export class DiscordMemberControllerBase {
  constructor(protected readonly service: DiscordMemberService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DiscordMember })
  async createDiscordMember(
    @common.Body() data: DiscordMemberCreateInput
  ): Promise<DiscordMember> {
    return await this.service.createDiscordMember({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DiscordMember] })
  @ApiNestedQuery(DiscordMemberFindManyArgs)
  async discordMembers(
    @common.Req() request: Request
  ): Promise<DiscordMember[]> {
    const args = plainToClass(DiscordMemberFindManyArgs, request.query);
    return this.service.discordMembers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DiscordMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async discordMember(
    @common.Param() params: DiscordMemberWhereUniqueInput
  ): Promise<DiscordMember | null> {
    const result = await this.service.discordMember({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DiscordMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDiscordMember(
    @common.Param() params: DiscordMemberWhereUniqueInput,
    @common.Body() data: DiscordMemberUpdateInput
  ): Promise<DiscordMember | null> {
    try {
      return await this.service.updateDiscordMember({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DiscordMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDiscordMember(
    @common.Param() params: DiscordMemberWhereUniqueInput
  ): Promise<DiscordMember | null> {
    try {
      return await this.service.deleteDiscordMember({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
