/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DiscordMember as PrismaDiscordMember } from "@prisma/client";

export class DiscordMemberServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DiscordMemberCountArgs, "select">
  ): Promise<number> {
    return this.prisma.discordMember.count(args);
  }

  async discordMembers(
    args: Prisma.DiscordMemberFindManyArgs
  ): Promise<PrismaDiscordMember[]> {
    return this.prisma.discordMember.findMany(args);
  }
  async discordMember(
    args: Prisma.DiscordMemberFindUniqueArgs
  ): Promise<PrismaDiscordMember | null> {
    return this.prisma.discordMember.findUnique(args);
  }
  async createDiscordMember(
    args: Prisma.DiscordMemberCreateArgs
  ): Promise<PrismaDiscordMember> {
    return this.prisma.discordMember.create(args);
  }
  async updateDiscordMember(
    args: Prisma.DiscordMemberUpdateArgs
  ): Promise<PrismaDiscordMember> {
    return this.prisma.discordMember.update(args);
  }
  async deleteDiscordMember(
    args: Prisma.DiscordMemberDeleteArgs
  ): Promise<PrismaDiscordMember> {
    return this.prisma.discordMember.delete(args);
  }
}
